use std::{sync::Arc, time::Duration};

use crate::{config::CONFIG, state::InnerAppState};
use aide::{axum::ApiRouter, openapi::OpenApi};
use axum::Extension;

use clap::Parser;
use cli::{Cli, CLI};
use tokio::signal;
use tower_http::{compression::CompressionLayer, timeout::TimeoutLayer};
use tracing::info;
use tracing_subscriber::{fmt::SubscriberBuilder, EnvFilter};

/// this is where the api is defined.
/// subservices are split into their own modules
mod api;
/// command line app
pub mod cli;
/// generate and read config file
pub mod config;
/// database stuff
pub mod db;
/// serve docs
mod docs;
/// extractors for aide
pub mod extractors;
/// middleware for checking user authentication
/// and powerlevel
pub mod middleware;
/// used for hashing passwords
pub mod pass;
/// autogenerated schema, do not change,
/// let diesel handle it
pub mod schema;
/// state for the app
pub mod state;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // enable tracing
    SubscriberBuilder::default()
        .pretty()
        .with_env_filter(
            EnvFilter::builder()
                .with_default_directive(CONFIG.logging.loglevel.into())
                .from_env_lossy(),
        )
        .init();

    // run db migrations before being able to change anything
    db::run_migrations()?;

    match CLI.command.clone() {
        cli::Commands::Run => {
            start_server().await?;
        }
        cli::Commands::User {
            subcommand,
            username,
        } => match subcommand {
            cli::UserSubcommands::ChangePassword { new_password } => {
                cli::user::change_password(&username, &new_password)?
            },
            cli::UserSubcommands::SetPowerLevel { powerlevel } => {
                cli::user::change_powerlevel(&username, &powerlevel)?
            }
        },
    }

    Ok(())
}

/// start the actual web server
async fn start_server() -> Result<(), Box<dyn std::error::Error>> {
    // generate openapi docs
    aide::gen::on_error(|error| panic!("{}", error));
    aide::gen::extract_schemas(true);
    let mut api = OpenApi::default(); // used to edit api docs

    // generate state
    let state = Arc::new(InnerAppState {
        pool: db::get_pool().await?,
    });

    // put together routes
    let app = ApiRouter::new()
        .nest_api_service("/api", api::routes(state.clone()))
        .nest_api_service("/docs", docs::docs_routes(state.clone()))
        .finish_api_with(&mut api, docs::add_api_docs)
        .layer(Extension(Arc::new(api)))
        .layer(TimeoutLayer::new(Duration::from_secs(20)))
        .layer(CompressionLayer::new())
        .with_state(state);

    let addr = config::CONFIG
        .server
        .socket
        .parse::<std::net::SocketAddr>()?;
    info!("starting server on address: {}", addr);

    // panic or unwrap is ok until here
    // we would like the server to abort immediately
    // rather than be misconfigured
    axum::Server::bind(&addr)
        .serve(app.into_make_service())
        .with_graceful_shutdown(shutdown_signal())
        .await?;

    Ok(())
}

/// provide a graceful shutdown signal for the server
async fn shutdown_signal() {
    let ctrl_c = async {
        signal::ctrl_c()
            .await
            .expect("failed to install Ctrl+C handler");
    };

    #[cfg(unix)]
    let terminate = async {
        signal::unix::signal(signal::unix::SignalKind::terminate())
            .expect("failed to install signal handler")
            .recv()
            .await;
    };

    #[cfg(not(unix))]
    let terminate = std::future::pending::<()>();

    tokio::select! {
        _ = ctrl_c => {},
        _ = terminate => {},
    }

    info!("received signal to terminate, starting graceful shutdown")
}
