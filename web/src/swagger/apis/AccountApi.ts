/* tslint:disable */
/* eslint-disable */
/**
 * intract
 * intract is an rss reader and generator for the modern web
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginData,
  RegisterData,
  User,
} from '../models';
import {
    LoginDataFromJSON,
    LoginDataToJSON,
    RegisterDataFromJSON,
    RegisterDataToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface LoginRequest {
    loginData: LoginData;
}

export interface RegisterRequest {
    registerData: RegisterData;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * provide username and password to get a session token. keep it safe!
     * log in
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.loginData === null || requestParameters.loginData === undefined) {
            throw new runtime.RequiredError('loginData','Required parameter requestParameters.loginData was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/account/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDataToJSON(requestParameters.loginData),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * provide username and password to get a session token. keep it safe!
     * log in
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.loginRaw(requestParameters, initOverrides);
    }

    /**
     * use this if you want a new account. it tries to create a new user with the password + username you gave. by default unapproved users have no permission to access any locked api routesor the login route
     * apply for account
     */
    async registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.registerData === null || requestParameters.registerData === undefined) {
            throw new runtime.RequiredError('registerData','Required parameter requestParameters.registerData was null or undefined when calling register.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/account/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterDataToJSON(requestParameters.registerData),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * use this if you want a new account. it tries to create a new user with the password + username you gave. by default unapproved users have no permission to access any locked api routesor the login route
     * apply for account
     */
    async register(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * tells you information about your account. one useful thing you can do with this is checking if you are logged in.
     * who am i???
     */
    async whoamiRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/authorized/account/whoami`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * tells you information about your account. one useful thing you can do with this is checking if you are logged in.
     * who am i???
     */
    async whoami(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.whoamiRaw(initOverrides);
        return await response.value();
    }

}
